/* Nombre de la clase                : CAltaRentasParametros 
 * Descripción de la clase        : Clase donde almacena los  bailes que que ocupan en el ballet
 * Fecha de creación                 : 15/04/2016 
 * Elaboró                                     : Rogelio Bernal / Carlos Trujilo 
 * Fecha de Liberación              : - 
 * Autorizó  : -
 * Fecha Mantenimiento           : 
 * Folio mantenimiento             : 
 * Descripción del mantto       :
 * Responsable                          :  
 * Revisor                                    : 
 */
package bfx.rentas;

import java.awt.Event;
import java.awt.event.KeyEvent;
import java.sql.*;
import bfx.controladores.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.InputMap;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

/**
 * Interfaz gráfica de rentas parametros para dar de alta un parametro de renta
 * @author Techno Engineers
 * @version 1.0
 */
public class CAltaRentasParametros extends javax.swing.JFrame {
    
    static CAltaRentasParametros objPantallaAltaRenta1 = new CAltaRentasParametros();
    private ArrayList <CRentasParametros> lALc= new ArrayList<CRentasParametros>();

    /**
     * Creates new form CAltaRentasParametros
     */
    public CAltaRentasParametros() {
        initComponents();
     
        Limitar();
        //evita el copiar y pegar
        InputMap map1 = objTFrentaActual.getInputMap(objTFrentaActual.WHEN_FOCUSED);
        map1.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), "null");
        /*InputMap map2 = jDFechaRentaActual.getInputMap(jDFechaRentaActual.WHEN_FOCUSED);
        map2.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), "null");*/
    }
    
    //metodo limitar caracteres del jtext
    public void Limitar(){
        objTFrentaActual.setDocument(new CLimitarCaracter(objTFrentaActual, 8));
    }
    
    /*
    validamos campos vacios
    */
    public int validaCamposVacios()
    {
        if (objTFrentaActual.getText().equals(""))
        {
            CMensajes.cmetpbFalla(this, "El campo de Renta Actual no debe estar en blanco");
            CManipulaInterfaz.cmetpbCambia(objTFrentaActual);
            CManipulaInterfaz.cmetpbHabilita(false,objDfechaRentaActual);
            return 1;
        }else if (objDfechaRentaActual.getDate() == null)
        {
            CMensajes.cmetpbFalla(this, "El campo de Fecha de Renta Actual no debe estar en blanco");
            CManipulaInterfaz.cmetpbCambia(objDfechaRentaActual);
            CManipulaInterfaz.cmetpbHabilita(false,objTFrentaActual);
            return 1;
        }
        return 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        objLregistroRP = new javax.swing.JLabel();
        objLrentaActual = new javax.swing.JLabel();
        objTFrentaActual = new javax.swing.JTextField();
        objLfechaRentaActual = new javax.swing.JLabel();
        objBaceptar = new javax.swing.JButton();
        objBcancelar = new javax.swing.JButton();
        objDfechaRentaActual = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(66, 112, 158));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        objLregistroRP.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objLregistroRP.setText("Registro de Parametros Rentas");

        objLrentaActual.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objLrentaActual.setText("Renta Actual:");

        objTFrentaActual.setMaximumSize(new java.awt.Dimension(150, 25));
        objTFrentaActual.setMinimumSize(new java.awt.Dimension(150, 25));
        objTFrentaActual.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                objTFrentaActualActionPerformed(evt);
            }
        });
        objTFrentaActual.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objTFrentaActualKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                objTFrentaActualKeyTyped(evt);
            }
        });

        objLfechaRentaActual.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objLfechaRentaActual.setText("Fecha Renta Actual:");

        objBaceptar.setBackground(new java.awt.Color(255, 255, 255));
        objBaceptar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objBaceptar.setText("Aceptar");
        objBaceptar.setMaximumSize(new java.awt.Dimension(150, 25));
        objBaceptar.setMinimumSize(new java.awt.Dimension(150, 25));
        objBaceptar.setPreferredSize(new java.awt.Dimension(150, 25));
        objBaceptar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                objBaceptarActionPerformed(evt);
            }
        });
        objBaceptar.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objBaceptarKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                objBaceptarKeyTyped(evt);
            }
        });

        objBcancelar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objBcancelar.setText("Cancelar");
        objBcancelar.setMaximumSize(new java.awt.Dimension(150, 25));
        objBcancelar.setMinimumSize(new java.awt.Dimension(150, 25));
        objBcancelar.setPreferredSize(new java.awt.Dimension(150, 25));
        objBcancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                objBcancelarActionPerformed(evt);
            }
        });
        objBcancelar.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                objBcancelarKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(objBaceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(objBcancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(objLfechaRentaActual)
                            .addComponent(objLrentaActual))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(objTFrentaActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(objDfechaRentaActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(89, 89, 89))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(objLregistroRP)
                .addGap(111, 111, 111))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(objLregistroRP)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objLrentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objTFrentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(objLfechaRentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objDfechaRentaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objBaceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objBcancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void objTFrentaActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objTFrentaActualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objTFrentaActualActionPerformed

    private void objTFrentaActualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFrentaActualKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n')//al presionar enter se pasa a la siguiente caja y se inhabilita la anterior
        {
            CManipulaInterfaz.cmetpbCambia(objDfechaRentaActual);
            CManipulaInterfaz.cmetpbHabilita(false, objTFrentaActual);
        }
    }//GEN-LAST:event_objTFrentaActualKeyPressed

    private void objTFrentaActualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFrentaActualKeyTyped
        // TODO add your handling code here:
        CValidaciones.cmetpbFlotante(evt);//valida que solo se acepten flotantes
    }//GEN-LAST:event_objTFrentaActualKeyTyped

    private void objBaceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objBaceptarActionPerformed
        int lEValida = this.validaCamposVacios();//llamamos al metodo validaCamposVacios
        if (lEValida == 0)//entra si los campos no regresan un 1, quiere decir que no vienen vacios
        {
            //obtenemos la fecha del jDateChooser
            String lSFechaRentaActual = new SimpleDateFormat("yyyy-MM-dd").format(objDfechaRentaActual.getDate());
            System.out.println(lSFechaRentaActual);

            //Conexion lCNConexion = new Conexion();lCNConexion
            Connection lCNConexion = CManipulaDB.cmetpbConectaDB();
            //con.Conecta("localhost", "trajin", "root", "123456");//conexión lCNConexion BD
            
                String lSDatos = "null," + "null," + "null," + "" + objTFrentaActual.getText() + "" + ",'" +lSFechaRentaActual + "'";
                CQuerys objCQuerys1 = new CQuerys();//objCQuerys1
                objCQuerys1.metpbSInsertar(lCNConexion, "rentasparametros", lSDatos);
                
                if (objCQuerys1 != null) {
                try {
                    CMensajes.cmetpbExito(this);
                    dispose();
                    lCNConexion.close();
                } catch (Exception ex) {
                    CMensajes.cmetpbMsj(this, "Error en DB... " + ex.getMessage());
                }
            } else {
                CMensajes.cmetpbFalla(this, "No se ha podido insertar correctamente.");
            }
            objBcancelarActionPerformed(evt);
        }
    }//GEN-LAST:event_objBaceptarActionPerformed

    private void objBaceptarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objBaceptarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n')
        {
            objBaceptarActionPerformed(null);
        }
    }//GEN-LAST:event_objBaceptarKeyPressed

    private void objBaceptarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objBaceptarKeyTyped

    }//GEN-LAST:event_objBaceptarKeyTyped

    private void objBcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objBcancelarActionPerformed
        // TODO add your handling code here:
        //si da clic en cancelar, limpia las cajas y se posiciona en la primer caja de texto
        objDfechaRentaActual.setCalendar(null);
        CManipulaInterfaz.cmetpbLimpia(objTFrentaActual);
        CManipulaInterfaz.cmetpbHabilita(true, objTFrentaActual);
        CManipulaInterfaz.cmetpbHabilitaObjetos(false, objDfechaRentaActual);
        CManipulaInterfaz.cmetpbCambia(objTFrentaActual);
        //dispose();
    }//GEN-LAST:event_objBcancelarActionPerformed

    private void objBcancelarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objBcancelarKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_objBcancelarKeyTyped

    private void objDfechaRentaActualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objDfechaRentaActualKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n')
        {
            CManipulaInterfaz.cmetpbCambia(objBaceptar);
            CManipulaInterfaz.cmetpbHabilita(false, objDfechaRentaActual);
        }
    }//GEN-LAST:event_objDfechaRentaActualKeyPressed

    private void objDfechaRentaActualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objDfechaRentaActualKeyTyped
        // TODO add your handling code here:
        CValidaciones.cmetpbAlfanumerico(evt);
    }//GEN-LAST:event_objDfechaRentaActualKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        CManipulaInterfaz.cmetpbHabilita(false, objDfechaRentaActual);
        Connection cn =CManipulaDB.cmetpbConectaDB();
        lALc=CManipulaDB.cmetpbALCargaRentas(CManipulaDB.cmetpbALConsult(cn, "rentasparametros", "*", ""));
        if (lALc!=null)
        {
            CMensajes.cmetpbFalla(this, "No puede haber más de dos resgistros de rentasparametros. Solo puedes modificar el existente.");
            CModificaRentasParametros cMP = new CModificaRentasParametros();
            cMP.setVisible(true);
            cMP.setLocationRelativeTo(null);
            cMP.setTitle("Modifica Rentas");
            dispose();
        }
        CManipulaDB.cmetpbDesconectaDB(cn);
    }//GEN-LAST:event_formWindowOpened

    private void objDfechaRentaActualKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objDfechaRentaActualKeyReleased
        // TODO add your handling code here:
        /*if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            System.out.println("HOLA QUE PASO");
        }*/
    }//GEN-LAST:event_objDfechaRentaActualKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CAltaRentasParametros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CAltaRentasParametros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CAltaRentasParametros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CAltaRentasParametros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                objPantallaAltaRenta1.setTitle("Alta de Parametros Renta");
                objPantallaAltaRenta1.setLocationRelativeTo(null);
                objPantallaAltaRenta1.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton objBaceptar;
    private javax.swing.JButton objBcancelar;
    private com.toedter.calendar.JDateChooser objDfechaRentaActual;
    private javax.swing.JLabel objLfechaRentaActual;
    private javax.swing.JLabel objLregistroRP;
    private javax.swing.JLabel objLrentaActual;
    private javax.swing.JTextField objTFrentaActual;
    // End of variables declaration//GEN-END:variables
}
