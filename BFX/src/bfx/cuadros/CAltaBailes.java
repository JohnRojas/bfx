/* Nombre de la clase                : CAltaBailes 
 * Descripción de la clase        : Clase donde almacena los  bailes que que ocupan en el ballet
 * Fecha de creación                 : 15/04/2016 
 * Elaboró                                     : Nava Ramirez Luis Fernando 
 * Fecha de Liberación              : - 
 * Autorizó  : -
 * Fecha Mantenimiento           : 
 * Folio mantenimiento             : 
 * Descripción del mantto       :
 * Responsable                          :  
 * Revisor                                    : 
 */
package bfx.cuadros;

import bfx.clases.*;
import bfx.controladores.CLimitarCaracter;
import bfx.controladores.CManipulaDB;
import bfx.controladores.CManipulaInterfaz;
import bfx.controladores.CMensajes;
import bfx.controladores.CPanelFondo;
import bfx.controladores.CQuerys;
import bfx.controladores.CValidaciones;
import java.awt.Event;
import java.awt.event.KeyEvent;

import java.sql.Connection;
import java.util.ArrayList;
import javax.swing.InputMap;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 * Interfaz gráfica de usuario para dar del alta un Baile
 * @author Techno Engineers
 * @version 1.0
 */

public class CAltaBailes extends javax.swing.JFrame {

    ArrayList<CCuadrosRegiones> lALCuadrosRegiones = new ArrayList<>();
    int lEidregiones;
    private CPanelFondo fondo;
   
    /*
      Verificar cajas de texto, botones y demas, tambien checar lo del fondo, los i de los for
      y los lCNConexion a la base de datos
    */
    
    /**
     * Creates new form VtnA
     */
    public CAltaBailes() {
        initComponents();
        this.setLayout(null);
        this.setLocationRelativeTo(null);
        fondo = new CPanelFondo("Alta de Bailes ...", "../imagenes/ballet.png", 0, 0, 420, 380);
        this.add(fondo);
        
        Limitar();
        
        //evita el copiar y pegar
        InputMap map1 = objTFNombreBaile.getInputMap(objTFNombreBaile.WHEN_FOCUSED);
        map1.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), "null");
        InputMap map2 = objTFDuracionBaile.getInputMap(objTFDuracionBaile.WHEN_FOCUSED);
        map1.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), "null");
    }
    
    public void Limitar(){
        objTFDuracionBaile.setDocument(new CLimitarCaracter(objTFDuracionBaile, 5));
    }

    public int metpbValidaCamposVacios() {
        if (objTFNombreBaile.getText().equals("")) {
            CMensajes.cmetpbFalla(this, "El campo del nombre no debe estar en blanco");
            objTFNombreBaile.requestFocus();
            return 1;
        } else if (objTFDuracionBaile.getText().equals("")) {
            CMensajes.cmetpbFalla(this, "El campo de la duracion no debe estar en blanco");
            objTFDuracionBaile.requestFocus();
            return 1;
        }
        return 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        objCBCuadro = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        objBAceptar = new javax.swing.JButton();
        objBCancelar = new javax.swing.JButton();
        objCBRegiones = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        objTFDuracionBaile = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        objTFNombreBaile = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Altas de ...");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Selecciona el Cuadro: ");

        objCBCuadro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objCBCuadro.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objCBCuadroKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Selecciona la Región:");

        objBAceptar.setBackground(new java.awt.Color(255, 255, 255));
        objBAceptar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objBAceptar.setText("Aceptar");
        objBAceptar.setEnabled(false);
        objBAceptar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                objBAceptarActionPerformed(evt);
            }
        });
        objBAceptar.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objBAceptarKeyPressed(evt);
            }
        });

        objBCancelar.setBackground(new java.awt.Color(255, 255, 255));
        objBCancelar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objBCancelar.setText("Cancelar");
        objBCancelar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                objBCancelarActionPerformed(evt);
            }
        });

        objCBRegiones.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objCBRegiones.setEnabled(false);
        objCBRegiones.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objCBRegionesKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Nombre del Baile:");

        objTFDuracionBaile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objTFDuracionBaile.setEnabled(false);
        objTFDuracionBaile.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objTFDuracionBaileKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                objTFDuracionBaileKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Duraciòn del Baile: (mm:ss)");

        objTFNombreBaile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        objTFNombreBaile.setEnabled(false);
        objTFNombreBaile.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                objTFNombreBaileKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                objTFNombreBaileKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(objCBCuadro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(objCBRegiones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(objTFNombreBaile)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(objTFDuracionBaile, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(objBAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(objBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(objCBCuadro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(objCBRegiones, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(objTFNombreBaile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(objTFDuracionBaile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objBAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(objBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void objCBCuadroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objCBCuadroKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            metpbSelecciona(lALCuadrosRegiones, objCBCuadro.getSelectedIndex(), true);
            //CManipulaInterfaz.cmetpbHabilita(true, regiones);
            
        }
    }//GEN-LAST:event_objCBCuadroKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        Connection lCNConexion = CManipulaDB.cmetpbConectaDB();
        CQuerys objCQuerys1 = new CQuerys();
        ArrayList<CCuadros> lALCargaCuadros = CManipulaDB.cmetpbCargaCuadros(objCQuerys1.metpbALSeleccion(lCNConexion,
                "*", "cuadros", ""));
        if (lALCargaCuadros == null) {
            JOptionPane.showMessageDialog(this, "NO hay datos que consultar");
            objCBCuadro.setEnabled(false);
            objCBRegiones.setEnabled(false);
        } else {
            for (int i = 0; i < lALCargaCuadros.size(); i++) {
                objCBCuadro.addItem(lALCargaCuadros.get(i).getPvCnombre());
                ArrayList<CRegiones> lALCargaRegiones = CManipulaDB.cmetpbCargaRegiones(objCQuerys1.metpbALSeleccion(lCNConexion,
                        "*", "regiones", "idcuadro = " + lALCargaCuadros.get(i).getPvEidCuadro() + " and status = 1"));
                if (lALCargaRegiones == null) {
                    //JOptionPane.showMessageDialog(this, "NO hay datos que consultar");
                    objCBRegiones.setEnabled(false);
                    CCuadrosRegiones objCuadrosRegiones1 = new CCuadrosRegiones(lALCargaCuadros.get(i), null);
                    lALCuadrosRegiones.add(objCuadrosRegiones1);
                } else {
                    CCuadrosRegiones objCuadrosRegiones2 = new CCuadrosRegiones(lALCargaCuadros.get(i), lALCargaRegiones);
                    lALCuadrosRegiones.add(objCuadrosRegiones2);
                }
            }
        }
        metpbSelecciona(lALCuadrosRegiones, 0, true);
    }//GEN-LAST:event_formWindowOpened

    private void objBAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objBAceptarActionPerformed
        // TODO add your handling code here:
        int lEValida = this.metpbValidaCamposVacios();
        //System.out.println("v = "+ v);
        if (lEValida == 0) {
            String lSDuracion = "00:" + objTFDuracionBaile.getText();
            //System.out.println("dur = " + dur);
            CBailes objCBailes1 = new CBailes(1, objTFNombreBaile.getText(), lSDuracion, 1, lEidregiones);
            //System.out.println(obj);
            String lSDatos = "null, '"
                    + objCBailes1.getPvCnombreBaile().trim() + "','"
                    + objCBailes1.getPvCduracion() + "',"
                    + objCBailes1.getPvEestatus() + ","
                    + String.valueOf(objCBailes1.getPvEidRegiones());
            //System.out.println("s = " + s);
            Connection lCNConexion = CManipulaDB.cmetpbConectaDB();

            CQuerys objCQuerys2 = new CQuerys();
            String lCBailes = objCQuerys2.metpbSInsertar(lCNConexion, "bailes", lSDatos);
            if (lCBailes == null) {
                CMensajes.cmetpbExito(this);//, "El dato se ha insertado correctamente.");//, "Notificación", 3, this);
            } else {
                CMensajes.cmetpbFalla(this, "Dato no insertado"); //,"Error",1, this);
            }
            CManipulaDB.cmetpbDesconectaDB(lCNConexion);
            objBCancelarActionPerformed(evt);

        } else {
            objCBCuadro.requestFocus();
        }

    }//GEN-LAST:event_objBAceptarActionPerformed

    private void objBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objBCancelarActionPerformed
        // TODO add your handling code here:
        CManipulaInterfaz.cmetpbLimpia(objTFDuracionBaile, objTFNombreBaile);
        CManipulaInterfaz.cmetpbHabilita(false, objTFNombreBaile, objTFDuracionBaile, objBAceptar, objCBRegiones);
        objCBCuadro.setSelectedIndex(0);
        objCBCuadro.requestFocus();
    }//GEN-LAST:event_objBCancelarActionPerformed

    private void objBAceptarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objBAceptarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            objBAceptarActionPerformed(null);
        }
    }//GEN-LAST:event_objBAceptarKeyPressed

    private void objCBRegionesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objCBRegionesKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            Connection lCNConexion = CManipulaDB.cmetpbConectaDB();
            CQuerys objCQuerys3 = new CQuerys();
            String lSNombreRegion = objCBRegiones.getSelectedItem().toString().substring(1);
            ArrayList<Object> lALidRegion = objCQuerys3.metpbALSeleccion(lCNConexion,
                    "idregiones", "regiones", "nombre = '" + lSNombreRegion + "'");
            String lSidregion = lALidRegion.get(0).toString().replace(" ", "");
            lEidregiones = Integer.parseInt(lSidregion);
            //System.out.println("id region="+idreg+"#");
            CManipulaInterfaz.cmetpbHabilita(true, objTFNombreBaile);
            CManipulaInterfaz.cmetpbCambiaCuadro(objTFNombreBaile);
            //System.out.println("id region="+idreg+"#");
        }
    }//GEN-LAST:event_objCBRegionesKeyPressed

    private void objTFNombreBaileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFNombreBaileKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            CManipulaInterfaz.cmetpbHabilita(true, objTFDuracionBaile);
            CManipulaInterfaz.cmetpbCambiaCuadro(objTFDuracionBaile);
        }
    }//GEN-LAST:event_objTFNombreBaileKeyPressed

    private void objTFDuracionBaileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFDuracionBaileKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            CManipulaInterfaz.cmetpbHabilita(true, objBAceptar);
            CManipulaInterfaz.cmetpbCambiaCuadro(objBAceptar);
        }
    }//GEN-LAST:event_objTFDuracionBaileKeyPressed

    private void objTFNombreBaileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFNombreBaileKeyTyped
        // TODO add your handling code here:
        CValidaciones.cmetpbAlfabetico(evt);
    }//GEN-LAST:event_objTFNombreBaileKeyTyped

    private void objTFDuracionBaileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_objTFDuracionBaileKeyTyped
        // TODO add your handling code here:
        CValidaciones.cmetpbHora(evt);
    }//GEN-LAST:event_objTFDuracionBaileKeyTyped

    public void metpbSelecciona(ArrayList<CCuadrosRegiones> lALCuadroRegiones, int lEidCuadroRegiones, boolean lBbandera) {
        if (lALCuadroRegiones != null) {
            if (lALCuadroRegiones.get(lEidCuadroRegiones).getPvAregiones() != null) {
                objCBRegiones.removeAllItems();
                objCBRegiones.setEnabled(true);
                CManipulaInterfaz.cmetpbCambiaCuadro(objCBRegiones);
                for (int i = 0; i < lALCuadroRegiones.get(lEidCuadroRegiones).getPvAregiones().size(); i++) {
                    objCBRegiones.addItem(lALCuadroRegiones.get(lEidCuadroRegiones).getPvAregiones().get(i).getPvCnombre());
                }
            } else {
                objCBRegiones.removeAllItems();
                objCBCuadro.requestFocus();
                objCBRegiones.setEnabled(false);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CAltaBailes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CAltaBailes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CAltaBailes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CAltaBailes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton objBAceptar;
    private javax.swing.JButton objBCancelar;
    private javax.swing.JComboBox<String> objCBCuadro;
    private javax.swing.JComboBox<String> objCBRegiones;
    private javax.swing.JTextField objTFDuracionBaile;
    private javax.swing.JTextField objTFNombreBaile;
    // End of variables declaration//GEN-END:variables
}
